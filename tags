!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
N_FRAMES	train.py	/^N_FRAMES = 2 # how many timesteps with images.$/;"	v
N_STEPS	train.py	/^N_STEPS = 10 # how many timestamps with non-image data$/;"	v
ProgressBar	utils.py	/^class ProgressBar:$/;"	c
Segment_Data	import_utils.py	/^Segment_Data = {}$/;"	v
Timer	utils.py	/^class Timer:$/;"	c
__init__	utils.py	/^    def __init__(self, iterations):$/;"	m	class:ProgressBar
__init__	utils.py	/^    def __init__(self, time_s):$/;"	m	class:Timer
__str__	utils.py	/^    def __str__(self):$/;"	m	class:ProgressBar	file:
__update_amount	utils.py	/^    def __update_amount(self, new_amount):$/;"	m	class:ProgressBar	file:
animate	utils.py	/^    def animate(self, iter):$/;"	m	class:ProgressBar
check	utils.py	/^    def check(self):$/;"	m	class:Timer
choice	train.py	/^        choice = high_steer[ctr_high]$/;"	v
choice	train.py	/^        choice = low_steer[ctr_low]$/;"	v
ctr	train.py	/^ctr = 0$/;"	v
ctr_high	train.py	/^        ctr_high = -1$/;"	v
ctr_high	train.py	/^        ctr_high = 0$/;"	v
ctr_high	train.py	/^ctr_high = -1$/;"	v
ctr_low	train.py	/^        ctr_low = -1$/;"	v
ctr_low	train.py	/^        ctr_low = 0$/;"	v
ctr_low	train.py	/^ctr_low = -1$/;"	v
data	train.py	/^    data = get_data(run_code,seg_num,offset,N_STEPS,offset+0,N_FRAMES,ignore=ignore,require_one=require_one)$/;"	v
desktopDir	utils.py	/^def desktopDir(*args):$/;"	f
get_data	import_utils.py	/^def get_data(run_code_num,seg_num,offset,slen,img_offset,img_slen,ignore=[],require_one=[],smooth_steer=True):$/;"	f
hdf5_runs_path	import_utils.py	/^hdf5_runs_path = desktopDir('bair_car_data\/hdf5\/runs')$/;"	v
hdf5_segment_metadata_path	import_utils.py	/^hdf5_segment_metadata_path = desktopDir('bair_car_data\/hdf5\/segment_metadata')$/;"	v
high_steer	train.py	/^high_steer  = load_obj(join(hdf5_segment_metadata_path , 'high_steer'))$/;"	v
homeDir	utils.py	/^def homeDir(*args):$/;"	f
home_path	utils.py	/^home_path = os.path.expanduser("~")$/;"	v
ignore	train.py	/^ignore=['reject_run','left','out1_in2'] # runs with these labels are ignored$/;"	v
join	utils.py	/^def join(*args):$/;"	f
len_high_steer	train.py	/^len_high_steer = len(high_steer)$/;"	v
len_low_steer	train.py	/^len_low_steer = len(low_steer)$/;"	v
load_hdf5	import_utils.py	/^def load_hdf5(path):$/;"	f
load_obj	import_utils.py	/^def load_obj(name ):$/;"	f
load_run_codes	import_utils.py	/^def load_run_codes():$/;"	f
load_run_data	import_utils.py	/^def load_run_data(run_code_num):$/;"	f
loss	train.py	/^loss = []$/;"	v
loss10000	train.py	/^loss10000 = []$/;"	v
low_steer	train.py	/^low_steer = load_obj(join(hdf5_segment_metadata_path , 'low_steer'))$/;"	v
offset	train.py	/^    offset = choice[1]$/;"	v
pb	train.py	/^pb = ProgressBar(1 + len(Segment_Data['run_codes']))$/;"	v
print_timer	train.py	/^print_timer = Timer(5)$/;"	v
rate_ctr	train.py	/^rate_ctr = 0$/;"	v
rate_timer	train.py	/^rate_timer = Timer(rate_timer_interval)$/;"	v
rate_timer_interval	train.py	/^rate_timer_interval = 10.$/;"	v
require_one	train.py	/^require_one=[] # at least one of this type of run lable is required$/;"	v
reset	utils.py	/^    def reset(self):$/;"	m	class:Timer
run_code	train.py	/^    run_code = choice[3]$/;"	v
seg_num	train.py	/^    seg_num = choice[0]$/;"	v
update_iteration	utils.py	/^    def update_iteration(self, elapsed_iter):$/;"	m	class:ProgressBar
